/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * WelcomeScreen.java
 *
 * Created on Nov 14, 2012, 7:51:03 PM
 */

package casinoroyale;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.ServerSocket;
import java.net.UnknownHostException;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.Selector;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Set;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author smg5498
 */
public class WelcomeScreen extends javax.swing.JFrame {

   public InetAddress serverAddress, inet;
   
   public welcomeClientThread chatClient;
   public String serverName;
   public readThread myRead = new readThread();
   public DefaultListModel sessionServers;
  // public boolean startAServer = true;
   public String myIpAddress = "";
   public Vector games = new Vector();
   public Vector ports = new Vector();
   public Vector ipAdds = new Vector();
   public String gameLobbyIP = "";
  
  
    /** Creates new form WelcomeScreen */
    public WelcomeScreen() {
        initComponents();
        gameSelector.addItem("Select A Game To Play");
        gameSelector.addItem("5 Card Draw");
        gameSelector.addItem("Texas Hold 'EM");
        gameSelector.addItem("Omaha Hold 'EM");
        gameSelector.addItem("Countdown Poker");
       
        
        try {
             
                   Thread.sleep(1000);
        } catch (InterruptedException ex) {
            Logger.getLogger(WelcomeScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
        
      
        
        sessionServers = new DefaultListModel();
       
                           
                        //plrFld[sessionList.getSelectedIndex()].setText(plrsInSession.elementAt(sessionList.getSelectedIndex()).toString());
    
           
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        gameSelector = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        nameFieldServer = new javax.swing.JTextField();
        serverStartButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        nameFieldClient = new javax.swing.JTextField();
        joinGameButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        sessionList = new javax.swing.JList();
        serverPortField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        startLobby = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        lobbyIPLbl = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        connectIPTextField = new javax.swing.JTextField();
        connectLobbyButton = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        startingMoneyField = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        htpItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Welcome to Casino Royale!");
        setBackground(new java.awt.Color(0, 51, 0));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(0, 51, 0));

        gameSelector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gameSelectorActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Rockwell", 1, 48));
        jLabel1.setForeground(new java.awt.Color(153, 153, 0));
        jLabel1.setText("WELCOME TO CASINO ROYALE");

        jLabel2.setFont(new java.awt.Font("Rockwell", 0, 24));
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Host A Session");

        jLabel3.setFont(new java.awt.Font("Rockwell", 0, 18));
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Select Game To Play:");

        jLabel4.setFont(new java.awt.Font("Rockwell", 0, 18));
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Enter Your Name:");

        serverStartButton.setText("Start Session");
        serverStartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                serverStartButtonActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Rockwell", 0, 24));
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Join A Session");

        jLabel6.setFont(new java.awt.Font("Rockwell", 0, 18));
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Sessions Available:");

        jLabel7.setFont(new java.awt.Font("Rockwell", 0, 18));
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Enter Your Name:");

        joinGameButton.setText("Join Session");
        joinGameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                joinGameButtonActionPerformed(evt);
            }
        });

        sessionList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        jScrollPane1.setViewportView(sessionList);

        serverPortField.setText("4444");

        jLabel8.setFont(new java.awt.Font("Rockwell", 0, 18));
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Port Number:");

        jLabel10.setFont(new java.awt.Font("Rockwell", 0, 24));
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Connect To a Game Lobby");

        startLobby.setText("Start");
        startLobby.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startLobbyActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Rockwell", 0, 14));
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("IP Address of Lobby:");

        lobbyIPLbl.setFont(new java.awt.Font("Rockwell", 0, 14));
        lobbyIPLbl.setForeground(new java.awt.Color(255, 255, 255));
        lobbyIPLbl.setText("Not Defined");

        jLabel13.setFont(new java.awt.Font("Rockwell", 0, 24));
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("Start A Game Lobby");

        connectIPTextField.setText("Enter IP Address Of Lobby Server");

        connectLobbyButton.setText("Connect");
        connectLobbyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectLobbyButtonActionPerformed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Rockwell", 0, 18));
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("Each Player's Money:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addComponent(jLabel1)
                .addContainerGap(115, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(78, 78, 78)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel12)
                            .addComponent(jLabel8))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(serverPortField, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(serverStartButton, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(startingMoneyField, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nameFieldServer, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(93, 93, 93)
                                .addComponent(jLabel2))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(81, 81, 81)
                                .addComponent(jLabel3)))
                        .addGap(18, 18, 18)
                        .addComponent(gameSelector, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 99, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel13)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(startLobby)
                            .addComponent(jLabel11))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lobbyIPLbl)))
                .addGap(75, 75, 75))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(96, 96, 96)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 372, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(connectIPTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(connectLobbyButton))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addGap(5, 5, 5)))
                        .addGap(30, 30, 30))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(jLabel7)
                                .addGap(12, 12, 12)
                                .addComponent(nameFieldClient, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(joinGameButton, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(15, 15, 15)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(401, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel1)
                .addGap(51, 51, 51)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(gameSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(14, 14, 14)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(nameFieldServer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel11)
                            .addComponent(lobbyIPLbl))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(startingMoneyField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12))
                        .addGap(16, 16, 16)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(serverPortField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(serverStartButton)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(startLobby)))
                .addGap(39, 39, 39)
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(30, 30, 30)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(nameFieldClient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(joinGameButton))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(connectIPTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(connectLobbyButton))))
                .addContainerGap(64, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jMenu2.setText("Help");

        htpItem.setText("How To Play");
        htpItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                htpItemMousePressed(evt);
            }
        });
        jMenu2.add(htpItem);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void gameSelectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gameSelectorActionPerformed
        if(gameSelector.getSelectedItem() == "5 Card Draw")
        JOptionPane.showMessageDialog(null, gameSelector.getItemAt(1));
        
    }//GEN-LAST:event_gameSelectorActionPerformed
    
    private void serverStartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_serverStartButtonActionPerformed
       if(gameSelector.getSelectedItem() == "5 Card Draw"){
            try {
                inet = InetAddress.getLocalHost();
            } catch (UnknownHostException ex) {
                Logger.getLogger(WelcomeScreen.class.getName()).log(Level.SEVERE, null, ex);
            }         
         chatClient.sendMessage("-5 Card Draw-" + inet.getHostAddress() + "-" + serverPortField.getText() + "-");
         Server fiveServer = new Server(Integer.parseInt(serverPortField.getText()), nameFieldServer.getText(), Integer.parseInt(startingMoneyField.getText()), myIpAddress);
         fiveServer.setVisible(true);
         this.setVisible(false);
 
       }else if(gameSelector.getSelectedItem() == "Texas Hold 'EM"){
            try {
                inet = InetAddress.getLocalHost();
            } catch (UnknownHostException ex) {
                Logger.getLogger(WelcomeScreen.class.getName()).log(Level.SEVERE, null, ex);
            }
         chatClient.sendMessage("-Texas Hold 'EM-" + inet.getHostAddress() + "-" + serverPortField.getText() + "-");
         HoldemServer holdemServer = new HoldemServer(Integer.parseInt(serverPortField.getText()), nameFieldServer.getText(), Integer.parseInt(startingMoneyField.getText()), myIpAddress);
         holdemServer.setVisible(true);
         this.setVisible(false);

       }else if(gameSelector.getSelectedItem() == "Omaha Hold 'EM"){
            try {
                inet = InetAddress.getLocalHost();
            } catch (UnknownHostException ex) {
                Logger.getLogger(WelcomeScreen.class.getName()).log(Level.SEVERE, null, ex);
            }
         chatClient.sendMessage("-Omaha Hold 'EM-" + inet.getHostAddress() + "-" + serverPortField.getText() + "-");
         OmahaServer omahaServer = new OmahaServer(Integer.parseInt(serverPortField.getText()), nameFieldServer.getText(), Integer.parseInt(startingMoneyField.getText()), myIpAddress);
         omahaServer.setVisible(true);
         this.setVisible(false);

       }else if(gameSelector.getSelectedItem() == "Countdown Poker"){
            try {
                inet = InetAddress.getLocalHost();
            } catch (UnknownHostException ex) {
                Logger.getLogger(WelcomeScreen.class.getName()).log(Level.SEVERE, null, ex);
            }
         chatClient.sendMessage("-Countdown Poker-" + inet.getHostAddress() + "-" + serverPortField.getText() + "-");
         CountdownServer countdownserver = new CountdownServer(Integer.parseInt(serverPortField.getText()), nameFieldServer.getText(), Integer.parseInt(startingMoneyField.getText()), myIpAddress);
         countdownserver.setVisible(true);
         this.setVisible(false);


       }
     
    }//GEN-LAST:event_serverStartButtonActionPerformed

    private void joinGameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_joinGameButtonActionPerformed
        if (games.elementAt(sessionList.getSelectedIndex()).equals("5 Card Draw")) {
            FiveCardClient fiveClient = new FiveCardClient(nameFieldClient.getText(), (String) ipAdds.elementAt(sessionList.getSelectedIndex()), (Integer) ports.elementAt(sessionList.getSelectedIndex()));
            fiveClient.chatClient.start();
            fiveClient.setVisible(true);
            this.setVisible(false);
        }else if (games.elementAt(sessionList.getSelectedIndex()).equals("Texas Hold 'EM")) {
            HoldEmClient holdemClient = new HoldEmClient(nameFieldClient.getText(), (String) ipAdds.elementAt(sessionList.getSelectedIndex()), (Integer) ports.elementAt(sessionList.getSelectedIndex()));
            holdemClient.chatClient.start();
            holdemClient.setVisible(true);
            this.setVisible(false);
        }else if (games.elementAt(sessionList.getSelectedIndex()).equals("Omaha Hold 'EM")) {
            OmahaClient omahaClient = new OmahaClient(nameFieldClient.getText(), (String) ipAdds.elementAt(sessionList.getSelectedIndex()), (Integer) ports.elementAt(sessionList.getSelectedIndex()));
            omahaClient.chatClient.start();
            omahaClient.setVisible(true);
            this.setVisible(false);
        }else if (games.elementAt(sessionList.getSelectedIndex()).equals("Countdown Poker")) {
            CountdownClient countdownClient = new CountdownClient(nameFieldClient.getText(), (String) ipAdds.elementAt(sessionList.getSelectedIndex()), (Integer) ports.elementAt(sessionList.getSelectedIndex()));
            countdownClient.chatClient.start();
            countdownClient.setVisible(true);
            this.setVisible(false);
        }
    
      
    }//GEN-LAST:event_joinGameButtonActionPerformed

    private void startLobbyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startLobbyActionPerformed
        BackGroundServer back = new BackGroundServer();
        gameLobbyIP = back.getLocalAddress().toString();
        lobbyIPLbl.setText(gameLobbyIP);
        chatClient = new welcomeClientThread();
        chatClient.start();
        startLobby.setEnabled(false);
    }//GEN-LAST:event_startLobbyActionPerformed

    private void connectLobbyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectLobbyButtonActionPerformed
        gameLobbyIP = connectIPTextField.getText().toString();
        chatClient = new welcomeClientThread();
        chatClient.start();
    }//GEN-LAST:event_connectLobbyButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        chatClient.sendMessage("quit");
        this.setVisible(false);
    }//GEN-LAST:event_formWindowClosing

    private void htpItemMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_htpItemMousePressed
     HowToPlayForm htp = new HowToPlayForm();
     htp.setVisible(true);
    }//GEN-LAST:event_htpItemMousePressed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new WelcomeScreen().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField connectIPTextField;
    private javax.swing.JButton connectLobbyButton;
    private javax.swing.JComboBox gameSelector;
    private javax.swing.JMenuItem htpItem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton joinGameButton;
    private javax.swing.JLabel lobbyIPLbl;
    private javax.swing.JTextField nameFieldClient;
    private javax.swing.JTextField nameFieldServer;
    private javax.swing.JTextField serverPortField;
    private javax.swing.JButton serverStartButton;
    private javax.swing.JList sessionList;
    private javax.swing.JButton startLobby;
    private javax.swing.JTextField startingMoneyField;
    // End of variables declaration//GEN-END:variables

    
   
    
    /*
     * CLIENT PORTION THREAD OF THE WELCOME SCREEN
     * 
     */
    public class welcomeClientThread extends Thread {

        public LinkedList clients;
        public ByteBuffer read;
        public ByteBuffer write;
        public SocketChannel sChan;
        public Selector readSelector;
        public CharsetDecoder asciiDecoder;
        
               

        public welcomeClientThread() {
            clients = new LinkedList();
            read = ByteBuffer.allocateDirect(300);
            write = ByteBuffer.allocateDirect(300);
            asciiDecoder = Charset.forName("US-ASCII").newDecoder();

        }

        public void run() {
            serverName = gameLobbyIP;
            connect(serverName);
            myRead.start();
            while (true) {
                readTheMessage();

                try {
                    Thread.sleep(30);
                } catch (InterruptedException ex) {
                  }
            }
        }

        public void connect(String host) {
            try {
                readSelector = Selector.open();
                InetAddress addr = InetAddress.getByName(host);                
                sChan = SocketChannel.open(new InetSocketAddress(addr, 5000));
                sChan.configureBlocking(false);
                sChan.register(readSelector, SelectionKey.OP_READ, new StringBuffer());
            } catch (Exception ex) {
            }
        }
        public void sendMessage(String msg){
            prepareBuffer(msg);
            //chatWindow.append(userName + " says: " + msg + "\n");
            channelWrite(sChan);

        }

        public void prepareBuffer(String msg) {
            write.clear();
            write.put(msg.getBytes());
            write.putChar('\n');
            write.flip();
        }

        public void channelWrite(SocketChannel client) {
            long num = 0;
            long length = write.remaining();

            while (num != length) {
                try {
                    num += sChan.write(write);
                    Thread.sleep(5);
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(null, "Error: " + ex.toString());
                } catch (InterruptedException ex) {
                }
            }
            write.rewind();
        }

        public void readTheMessage() {
            try {
                //read.clear();
                readSelector.selectNow();
                Set readyKeys = readSelector.selectedKeys();
                Iterator iterator = readyKeys.iterator();

                while (iterator.hasNext()) {
                    SelectionKey key = (SelectionKey) iterator.next();
                    iterator.remove();
                    SocketChannel channel = (SocketChannel) key.channel();

                    long nbytes = channel.read(read);

                    if (nbytes == -1) {
                       
                        channel.close();
                    } else {
                       // StringBuffer sb = (StringBuffer) key.attachment();
                        read.flip();
                        String str = asciiDecoder.decode(read).toString();
                       // sb.append(str);
                        read.clear();

                        String line = str;
                        
                        if ((line.indexOf("\n") != -1) || (line.indexOf("\r") != -1)) {

                            line = line.trim();
                                                        
                            if(line.charAt(0) == '-' ){
                                String temp[];                               
                                temp = line.split("-");
                                String game = temp[1];
                                String ip = temp[2];
                                String port = temp[3];
                              
                                        games.addElement(new String(game));
                                        ports.addElement(new Integer(Integer.parseInt(port)));
                                        ipAdds.addElement(new String(ip));
                                       sessionServers.addElement(game + " On Port: " + port + " IP Address: " + ip);
                                        sessionList.setModel(sessionServers);   
                                                  
                                
                            }
                            
                           
                           
                          
//                            chatWindow.append(">" + line);
//                            chatWindow.append("" + '\n');

//                            String bs[] = line.split(",");
//                           turn = Integer.parseInt(bs[0]);
                           
                           // sb.delete(0, sb.length());
                          
                        }
                        line = "";

                    }

                }
            }catch(IOException ex){
                
            }catch(Exception e){
                
            }
        }


    }//End of Client Thread
    
    public class readThread extends Thread {
        public void run(){
            chatClient.readTheMessage();
        }
    }
}// End WelcomeScreen.java Class


